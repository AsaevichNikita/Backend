version: "3.9"
services:
  consultating-app:
    build:
      context: .
    depends_on:
      - keycloak-postgres
      - application-mysql
      - keycloak
    ports:
      - "8300:8300"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://application-mysql:3306/consultation_db
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/consultation_app_realm/protocol/openid-connect/certs
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      SPRINGDOC_SWAGGER_UI_OAUTH_CLIENT_ID: consultation_app_client
      SPRINGDOC_SWAGGER_UI_OAUTH_CLIENT_SECRET: spWJDxn97eyVt61ISm7UwwVRV5RcrN77
    command: [ "sh", "-c", "sleep 10 && java -jar /ConsultatingApplication-1.0.0.jar" ]

  front-end:
    build:
      context: ../MentorApp # Путь к папке с проектом front-end
      dockerfile: Dockerfile # Dockerfile для сборки front-end приложения
    ports:
      - "3100:3100" # Пробрасываем порт, на котором будет работать front-end
    depends_on:
      - consultating-app # Указываем зависимость от сервиса back-end
      - grafana
      - prometheus

  keycloak-postgres:
    image: library/postgres:${KC_POSTGRES_IMAGE_TAG:-14}
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres}
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - ${KC_POSTGRES_PORT_MAPPING:-5435}:5432
    deploy:
      resources:
        limits:
          memory: 256M

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: keycloak
    command:
      - start --auto-build --db postgres --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm --spi-user-profile-legacy-user-profile-read-only-attributes *_RES_ACCESS_MODE
    environment:
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
#    volumes:
#      - type: bind
#        source: ./src/main/resources/keycloak/import/realm-export.json
#        target: /opt/keycloak/data/import/realm-export.json
#        read_only: true
    ports:
      - "8282:8080"
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master"]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s

  application-mysql:
    image: mysql:8.0.33
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: consultation_db
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    ports:
      - "3307:3306"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - monitoring
    restart: always

networks:
  monitoring:
volumes:
  grafana_data:
  prometheus_data:
